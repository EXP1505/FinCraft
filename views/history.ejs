<%- include('partials/header') %>
<%- include('partials/navbar') %>
<link rel="stylesheet" href="/css/history.css">
<div class="container">
    <div class="history-header">
        <h1>Trade History</h1>
        <div class="summary-stats">
            <div class="stat-card">
                <h3>Total Trades</h3>
                <span class="stat-value"><%= trades.length %></span>
            </div>
            <div class="stat-card">
                <h3>Total P&L</h3>
                <span class="stat-value <%= totalPnL >= 0 ? 'profit' : 'loss' %>">
                    <%= totalPnL >= 0 ? '+' : '' %>$<%= Math.abs(totalPnL).toFixed(2) %>
                </span>
            </div>
            <div class="stat-card">
                <h3>Win Rate</h3>
                <span class="stat-value"><%= winRate %>%</span>
            </div>
            <div class="stat-card">
                <h3>Avg P&L</h3>
                <span class="stat-value <%= (totalPnL / trades.length) >= 0 ? 'profit' : 'loss' %>">
                    <% const avgPnL = trades.length > 0 ? (totalPnL / trades.length) : 0; %>
                    <%= avgPnL >= 0 ? '+' : '' %>$<%= Math.abs(avgPnL).toFixed(2) %>
                </span>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="filters-section">
        <form method="GET" action="/history" class="filter-form">
            <div class="filter-row">
                <div class="filter-group">
                    <label for="stock">Stock Symbol:</label>
                    <select id="stock" name="stock">
                        <option value="">All Stocks</option>
                        <% 
                        // Get unique stock symbols from uniqueStocks array
                        if (uniqueStocks && uniqueStocks.length > 0) {
                            uniqueStocks.forEach(stock => { 
                        %>
                            <option value="<%= stock %>"><%= stock %></option>
                        <% 
                            });
                        }
                        %>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="period">Time Period:</label>
                    <select id="period" name="period">
                        <option value="">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                        <option value="year">This Year</option>
                    </select>
                </div>
                
                <div class="filter-actions">
                    <button type="submit" class="apply-filters-btn">Apply Filters</button>
                    <button type="button" class="clear-filters-btn" onclick="clearFilters()">Clear Filters</button>
                </div>
            </div>
        </form>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <button class="action-btn" onclick="showStatsModal()">üìä Detailed Stats</button>
        <button class="action-btn" onclick="showPortfolioModal()">üíº Portfolio</button>
        <button class="action-btn" onclick="exportTrades()">üì§ Export CSV</button>
    </div>

    <!-- Trades Table -->
    <div class="trades-table-container">
        <% if (trades.length === 0) { %>
            <div class="no-trades">
                <div class="no-trades-icon">üìä</div>
                <h3>No trades found</h3>
                <p>Start trading to see your history here!</p>
                <a href="/stocks" class="btn btn-primary">Browse Stocks</a>
            </div>
        <% } else { %>
            <table class="trades-table" id="tradesTable">
                <thead>
                    <tr>
                        <th onclick="sortTable(0)">Date <span class="sort-arrow">‚ÜïÔ∏è</span></th>
                        <th onclick="sortTable(1)">Stock <span class="sort-arrow">‚ÜïÔ∏è</span></th>
                        <th onclick="sortTable(2)">Company <span class="sort-arrow">‚ÜïÔ∏è</span></th>
                        <th onclick="sortTable(3)">Type <span class="sort-arrow">‚ÜïÔ∏è</span></th>
                        <th onclick="sortTable(4)">Quantity <span class="sort-arrow">‚ÜïÔ∏è</span></th>
                        <th onclick="sortTable(5)">Price <span class="sort-arrow">‚ÜïÔ∏è</span></th>
                        <th onclick="sortTable(6)">Total <span class="sort-arrow">‚ÜïÔ∏è</span></th>
                        <th onclick="sortTable(7)">P&L <span class="sort-arrow">‚ÜïÔ∏è</span></th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% trades.forEach(trade => { %>
                        <tr class="trade-row" data-stock="<%= trade.symbol %>" data-type="<%= trade.action.toLowerCase() %>" data-date="<%= trade.timestamp.getTime() %>">
                            <td class="trade-date">
                                <%= trade.timestamp.toLocaleDateString() %>
                                <span class="trade-time"><%= trade.timestamp.toLocaleTimeString() %></span>
                            </td>
                            <td class="stock-symbol">
                                <a href="/stock/<%= trade.symbol %>"><%= trade.symbol %></a>
                            </td>
                            <td class="company-name">
                                <%= trade.companyName || trade.symbol %>
                            </td>
                            <td class="trade-type">
                                <span class="type-badge <%= trade.action.toLowerCase() %>"><%= trade.action %></span>
                            </td>
                            <td class="quantity"><%= trade.quantity.toLocaleString() %></td>
                            <td class="price">$<%= trade.price.toFixed(2) %></td>
                            <td class="total">$<%= (trade.quantity * trade.price).toFixed(2) %></td>
                            <td class="pnl <%= trade.profitLoss >= 0 ? 'profit' : 'loss' %>">
                                <% if (trade.profitLoss !== undefined && trade.profitLoss !== null && trade.profitLoss !== 0) { %>
                                    <%= trade.profitLoss >= 0 ? '+' : '' %>$<%= Math.abs(trade.profitLoss).toFixed(2) %>
                                <% } else { %>
                                    <span class="pending">-</span>
                                <% } %>
                            </td>
                            <td class="actions">
                                <button class="delete-btn" onclick="deleteTrade('<%= trade._id %>')" title="Delete Trade">üóëÔ∏è</button>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        <% } %>
    </div>
</div>

<!-- Stats Modal -->
<div id="statsModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="hideStatsModal()">&times;</span>
        <h2>Detailed Trading Statistics</h2>
        <div id="statsContent">
            <div class="loading">Loading statistics...</div>
        </div>
    </div>
</div>

<!-- Portfolio Modal -->
<div id="portfolioModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="hidePortfolioModal()">&times;</span>
        <h2>Current Portfolio</h2>
        <div id="portfolioContent">
            <div class="loading">Loading portfolio...</div>
        </div>
    </div>
</div>

<script>
// Clear filters functionality
function clearFilters() {
    window.location.href = '/history';
}

// Sort table functionality
let sortDirection = {};

function sortTable(columnIndex) {
    const table = document.getElementById('tradesTable');
    const tbody = table.tBodies[0];
    const rows = Array.from(tbody.querySelectorAll('tr'));
    
    const direction = sortDirection[columnIndex] === 'asc' ? 'desc' : 'asc';
    sortDirection[columnIndex] = direction;
    
    rows.sort((a, b) => {
        let aVal = a.cells[columnIndex].textContent.trim();
        let bVal = b.cells[columnIndex].textContent.trim();
        
        // Handle different data types
        if (columnIndex === 0) { // Date
            aVal = new Date(Number(a.dataset.date)).getTime();
            bVal = new Date(Number(b.dataset.date)).getTime();
        } else if (columnIndex === 4 || columnIndex === 5 || columnIndex === 6) { // Numbers
            aVal = parseFloat(aVal.replace(/[$,]/g, ''));
            bVal = parseFloat(bVal.replace(/[$,]/g, ''));
        }
        
        if (direction === 'asc') {
            return aVal > bVal ? 1 : -1;
        } else {
            return aVal < bVal ? 1 : -1;
        }
    });
    
    rows.forEach(row => tbody.appendChild(row));
}

// Delete trade functionality
function deleteTrade(tradeId) {
    if (confirm('Are you sure you want to delete this trade?')) {
        fetch(`/trades/${tradeId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Error deleting trade: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error deleting trade');
        });
    }
}

// Modal functions
function showStatsModal() {
    document.getElementById('statsModal').style.display = 'block';
    loadStats();
}

function hideStatsModal() {
    document.getElementById('statsModal').style.display = 'none';
}

function showPortfolioModal() {
    document.getElementById('portfolioModal').style.display = 'block';
    loadPortfolio();
}

function hidePortfolioModal() {
    document.getElementById('portfolioModal').style.display = 'none';
}

// Load detailed statistics
function loadStats() {
    fetch('/trades/stats')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const stats = data.stats;
                document.getElementById('statsContent').innerHTML = `
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-label">Total Trades</div>
                            <div class="stat-value">${stats.totalTrades}</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">Total P&L</div>
                            <div class="stat-value ${stats.totalProfit >= 0 ? 'profit' : 'loss'}">
                                ${stats.totalProfit >= 0 ? '+' : ''}$${stats.totalProfit}
                            </div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">Win Rate</div>
                            <div class="stat-value">${stats.winRate}%</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">Avg P&L per Trade</div>
                            <div class="stat-value ${stats.avgProfit >= 0 ? 'profit' : 'loss'}">
                                ${stats.avgProfit >= 0 ? '+' : ''}$${stats.avgProfit}
                            </div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">Best Trade</div>
                            <div class="stat-value profit">+$${stats.bestTrade}</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">Worst Trade</div>
                            <div class="stat-value loss">$${stats.worstTrade}</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">Winning Trades</div>
                            <div class="stat-value">${stats.winningTrades}</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label">Losing Trades</div>
                            <div class="stat-value">${stats.losingTrades}</div>
                        </div>
                    </div>
                `;
            } else {
                document.getElementById('statsContent').innerHTML = '<div class="error">Error loading statistics</div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('statsContent').innerHTML = '<div class="error">Error loading statistics</div>';
        });
}

// Load portfolio
function loadPortfolio() {
    fetch('/trades/portfolio')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const portfolio = data.portfolio;
                if (portfolio.length === 0) {
                    document.getElementById('portfolioContent').innerHTML = '<div class="empty-portfolio">No current holdings</div>';
                } else {
                    let portfolioHtml = `
                        <table class="portfolio-table">
                            <thead>
                                <tr>
                                    <th>Symbol</th>
                                    <th>Company</th>
                                    <th>Quantity</th>
                                    <th>Avg Price</th>
                                    <th>Total Value</th>
                                </tr>
                            </thead>
                            <tbody>
                    `;
                    
                    portfolio.forEach(holding => {
                        portfolioHtml += `
                            <tr>
                                <td><strong>${holding.symbol}</strong></td>
                                <td>${holding.companyName}</td>
                                <td>${holding.quantity.toLocaleString()}</td>
                                <td>$${holding.averagePrice}</td>
                                <td>$${(holding.quantity * holding.averagePrice).toFixed(2)}</td>
                            </tr>
                        `;
                    });
                    
                    portfolioHtml += '</tbody></table>';
                    document.getElementById('portfolioContent').innerHTML = portfolioHtml;
                }
            } else {
                document.getElementById('portfolioContent').innerHTML = '<div class="error">Error loading portfolio</div>';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('portfolioContent').innerHTML = '<div class="error">Error loading portfolio</div>';
        });
}

// Export trades to CSV
function exportTrades() {
    const table = document.getElementById('tradesTable');
    const rows = table.querySelectorAll('tr');
    let csvContent = '';
    
    rows.forEach(row => {
        const cells = row.querySelectorAll('td, th');
        const rowData = [];
        for (let i = 0; i < cells.length - 1; i++) { // Skip the last column (Actions)
            rowData.push(cells[i].textContent.trim());
        }
        csvContent += rowData.join(',') + '\n';
    });
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'trade_history.csv';
    a.click();
    window.URL.revokeObjectURL(url);
}

// Close modals when clicking outside
window.onclick = function(event) {
    const statsModal = document.getElementById('statsModal');
    const portfolioModal = document.getElementById('portfolioModal');
    
    if (event.target === statsModal) {
        hideStatsModal();
    }
    if (event.target === portfolioModal) {
        hidePortfolioModal();
    }
}
</script>

<%- include('partials/footer') %>