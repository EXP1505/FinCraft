<%- include('partials/header', { title: stock.symbol }) %>
<%- include('partials/navbar') %>

<div class="container">
    <div class="stock-page-header">
        <div class="stock-title">
            <h1><%= stock.symbol %></h1>
            <p><%= stock.name || 'Loading company name...' %></p>
        </div>
        <div class="stock-actions">
            <button class="watchlist-btn" data-symbol="<%=stock.symbol %>">
                <i class="fas fa-star"></i> <span>Add to Watchlist</span>
            </button>
            
        </div>
    </div>

    <!-- Stock Price & Info -->
    <div class="stock-overview">
        <div class="price-section">
            <div class="current-price">
                <span class="price" id="current-price">$<%= stock.price.toFixed(2) %></span>
                <span class="change <%= stock.change >= 0 ? 'positive' : 'negative' %>" id="price-change">
                    <%= stock.change >= 0 ? '+' : '' %><%= stock.change.toFixed(2) %> 
                    (<%= stock.changePercent.toFixed(2) %>%)
                </span>
            </div>
            <div class="price-details">
                <div class="price-item">
                    <span class="label">Open:</span>
                    <span class="value">$<%= stock.open.toFixed(2) %></span>
                </div>
                <div class="price-item">
                    <span class="label">High:</span>
                    <span class="value">$<%= stock.high.toFixed(2) %></span>
                </div>
                <div class="price-item">
                    <span class="label">Low:</span>
                    <span class="value">$<%= stock.low.toFixed(2) %></span>
                </div>
                <div class="price-item">
                    <span class="label">Previous Close:</span>
                    <span class="value">$<%= stock.previousClose.toFixed(2) %></span>
                </div>
            </div>
        </div>

        <!-- Stock Chart -->
        <div class="chart-section">
            <div class="chart-header">
                <h3>Price Chart</h3>
                <div class="chart-controls">
                    <button class="chart-btn active" data-period="1D">1D</button>
                    <button class="chart-btn" data-period="1W">1W</button>
                    <button class="chart-btn" data-period="1M">1M</button>
                    <button class="chart-btn" data-period="3M">3M</button>
                    <button class="chart-btn" data-period="1Y">1Y</button>
                </div>
            </div>
            <div class="chart-container" style="position: relative; height: 400px;">
                <canvas id="stockChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Trading Section -->
    <div class="trading-section">
        <h2>Simulate Trade</h2>
        <div class="trading-forms">
            <div class="trade-form-container">
                <h3>Buy <%= stock.symbol %></h3>
                <form id="buyForm" class="trade-form">
                    <input type="hidden" name="symbol" value="<%= stock.symbol %>">
                    <input type="hidden" name="type" value="buy">
                    <input type="hidden" name="price" value="<%= stock.price %>">
                    
                    <div class="form-group">
                        <label for="buyQuantity">Quantity</label>
                        <input type="number" id="buyQuantity" name="quantity" min="1" required>
                    </div>
                    
                    <div class="trade-summary">
                        <div class="summary-item">
                            <span>Price per share:</span>
                            <span>$<%= stock.price.toFixed(2) %></span>
                        </div>
                        <div class="summary-item">
                            <span>Total cost:</span>
                            <span id="buyTotal">$0.00</span>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-buy">
                        <i class="fas fa-arrow-up"></i> Buy Shares
                    </button>
                </form>
            </div>

            <div class="trade-form-container">
                <h3>Sell <%= stock.symbol %></h3>
                <form id="sellForm" class="trade-form">
                    <input type="hidden" name="symbol" value="<%= stock.symbol %>">
                    <input type="hidden" name="type" value="sell">
                    <input type="hidden" name="price" value="<%= stock.price %>">
                    
                    <div class="form-group">
                        <label for="sellQuantity">Quantity</label>
                        <input type="number" id="sellQuantity" name="quantity" min="1" required>
                    </div>
                    
                    <div class="trade-summary">
                        <div class="summary-item">
                            <span>Price per share:</span>
                            <span>$<%= stock.price.toFixed(2) %></span>
                        </div>
                        <div class="summary-item">
                            <span>Total value:</span>
                            <span id="sellTotal">$0.00</span>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-sell">
                        <i class="fas fa-arrow-down"></i> Sell Shares
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Recommendations -->
    <% if (recommendation && recommendation.length > 0) { %>
        <div class="recommendations-section">
            <h2>Analyst Recommendations</h2>
            <div class="recommendation-summary">
                <% 
                const latest = recommendation[0];
                const total = latest.buy + latest.hold + latest.sell + latest.strongBuy + latest.strongSell;
                %>
                <div class="recommendation-chart">
                    <div class="rec-item">
                        <span class="rec-label">Strong Buy</span>
                        <div class="rec-bar">
                            <div class="rec-fill strong-buy" style="width: <%= (latest.strongBuy / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.strongBuy %></span>
                    </div>
                    <div class="rec-item">
                        <span class="rec-label">Buy</span>
                        <div class="rec-bar">
                            <div class="rec-fill buy" style="width: <%= (latest.buy / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.buy %></span>
                    </div>
                    <div class="rec-item">
                        <span class="rec-label">Hold</span>
                        <div class="rec-bar">
                            <div class="rec-fill hold" style="width: <%= (latest.hold / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.hold %></span>
                    </div>
                    <div class="rec-item">
                        <span class="rec-label">Sell</span>
                        <div class="rec-bar">
                            <div class="rec-fill sell" style="width: <%= (latest.sell / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.sell %></span>
                    </div>
                    <div class="rec-item">
                        <span class="rec-label">Strong Sell</span>
                        <div class="rec-bar">
                            <div class="rec-fill strong-sell" style="width: <%= (latest.strongSell / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.strongSell %></span>
                    </div>
                </div>
            </div>
        </div>
    <% } %>

    <!-- Recent Trades for this Stock -->
    <div class="stock-trades-section">
        <h2>Your Recent Trades - <%= stock.symbol %></h2>
        <div class="trades-list" id="stockTrades">
            <!-- Trades will be loaded here -->
        </div>
    </div>
</div>

<!-- Load Dependencies -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Include your chart.js file -->
<script src="/js/chart.js"></script>
<script src="/js/watchlist.js"></script>

<script>
// Global variables
const stockSymbol = '<%= stock.symbol %>';
const currentPrice = <%= stock.price %>;
let stockChart = null;

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeStockPage();
});

// Initialize all components
function initializeStockPage() {
    setupTradeCalculators();
    setupTradeForms();
    setupChartControls();
    initializeChart();
    loadStockTrades();
}

// Initialize chart using your StockChart class
function initializeChart() {
    try {
        const ctx = document.getElementById('stockChart');
        if (!ctx) {
            console.error('Chart canvas not found');
            return;
        }

        // Generate simple mock data
        const mockData = generateMockData();

        // Dynamically set color based on changePercent
        const isPositive = <%= stock.changePercent %> >= 0;
        const borderColor = isPositive ? '#10b981' : '#dc2626';
        const backgroundColor = isPositive ? 'rgba(16, 185, 129, 0.1)' : 'rgba(220, 38, 38, 0.1)';

        
        stockChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: mockData.labels,
                datasets: [{
                    label: stockSymbol,
                    data: mockData.prices,
                    borderColor: borderColor,
                    backgroundColor: backgroundColor,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.1,
                    pointRadius: 0,
                    pointHoverRadius: 5
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Price: $${context.parsed.y.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    x: { 
                        display: true, 
                        grid: { display: false }
                    },
                    y: {
                        display: true,
                        beginAtZero: false,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
        
    } catch (error) {
        console.error('Error initializing chart:', error);
        showChartError('Unable to load chart');
    }
}

function generateMockData() {
    const periods = 24;
    const prices = [];
    const labels = [];
    let price = currentPrice;
    
    for (let i = periods - 1; i >= 0; i--) {
        const change = (Math.random() - 0.5) * (currentPrice * 0.02);
        price = Math.max(price + change, currentPrice * 0.9);
        prices.push(parseFloat(price.toFixed(2)));
        
        const hour = (24 - i) % 24;
        labels.push(`${hour.toString().padStart(2, '0')}:00`);
    }
    
    return { prices, labels };
}

// Setup chart period controls
function setupChartControls() {
    document.querySelectorAll('.chart-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            // Update active state
            document.querySelectorAll('.chart-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            // Load chart for selected period
            const period = this.dataset.period;
            if (stockChart) {
                stockChart.changeTimeframe(period);
            }
        });
    });
}

// Fallback: Show mock chart if API fails
function showMockChart() {
    console.log('Using mock data for chart...');
    initializeChart(); // Just call the main chart function
}

// Show chart error message
function showChartError(message) {
    const container = document.querySelector('.chart-container');
    if (container) {
        container.innerHTML = `
            <div style="
                display: flex; 
                align-items: center; 
                justify-content: center; 
                height: 100%; 
                color: #dc2626; 
                text-align: center;
            ">
                <div>
                    <div style="font-size: 18px; margin-bottom: 10px;">${message}</div>
                    <button onclick="location.reload()" style="
                        padding: 8px 16px; 
                        background: #10b981; 
                        color: white; 
                        border: none; 
                        border-radius: 4px; 
                        cursor: pointer;
                    ">
                        Retry
                    </button>
                </div>
            </div>
        `;
    }
}

// Setup trade total calculators
function setupTradeCalculators() {
    document.getElementById('buyQuantity').addEventListener('input', function() {
        const quantity = parseInt(this.value) || 0;
        const total = quantity * currentPrice;
        document.getElementById('buyTotal').textContent = `$${total.toFixed(2)}`;
    });

    document.getElementById('sellQuantity').addEventListener('input', function() {
        const quantity = parseInt(this.value) || 0;
        const total = quantity * currentPrice;
        document.getElementById('sellTotal').textContent = `$${total.toFixed(2)}`;
    });
}

// Setup trade form handlers
function setupTradeForms() {
    // Buy form
    document.getElementById('buyForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        const tradeData = {
            type: formData.get('type'),
            quantity: parseInt(formData.get('quantity')),
            price: parseFloat(formData.get('price'))
        };

        executeTrade(tradeData, this);
    });

    // Sell form
    document.getElementById('sellForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        const tradeData = {
            type: formData.get('type'),
            quantity: parseInt(formData.get('quantity')),
            price: parseFloat(formData.get('price'))
        };

        executeTrade(tradeData, this);
    });
}

// Execute trade
async function executeTrade(tradeData, form) {
    try {
        const response = await fetch(`/stocks/${stockSymbol}/trade`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(tradeData)
        });

        const result = await response.json();

        if (result.success) {
            alert('Trade executed successfully!');
            form.reset();
            document.getElementById('buyTotal').textContent = '$0.00';
            document.getElementById('sellTotal').textContent = '$0.00';
            loadStockTrades();
        } else {
            alert('Error executing trade: ' + result.error);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error executing trade');
    }
}

// Load stock trades
async function loadStockTrades() {
    try {
        const response = await fetch(`/trades/stock/${stockSymbol}`);
        const trades = await response.json();
        
        const tradesContainer = document.getElementById('stockTrades');
        if (!tradesContainer) return;
        
        if (trades.length === 0) {
            tradesContainer.innerHTML = '<div class="no-trades"><p>No trades yet for this stock.</p></div>';
            return;
        }
        
        tradesContainer.innerHTML = trades.map(trade => `
            <div class="trade-item">
                <div class="trade-details">
                    <span class="trade-type ${trade.type.toLowerCase()}">${trade.type.toUpperCase()}</span>
                    <span class="trade-quantity">${trade.quantity} shares</span>
                    <span class="trade-price">$${trade.price.toFixed(2)}</span>
                </div>
                <div class="trade-result">
                    <span class="trade-profit ${trade.profitLoss >= 0 ? 'profit' : 'loss'}">
                        $${(trade.profitLoss ?? 0).toFixed(2)}
                    </span>
                    <span class="trade-date">
                        ${new Date(trade.tradeDate).toLocaleDateString()}
                    </span>
                </div>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error loading trades:', error);
        const tradesContainer = document.getElementById('stockTrades');
        if (tradesContainer) {
            tradesContainer.innerHTML = '<div class="no-trades"><p>Unable to load trades.</p></div>';
        }
    }
}

// Cleanup on page unload
window.addEventListener('beforeunload', function() {
    if (stockChart && stockChart.destroy) {
        stockChart.destroy();
    }
});
</script>

<%- include('partials/footer') %>