<%- include('partials/header', { title: stock.symbol }) %>
<%- include('partials/navbar') %>

<div class="container">
    <div class="stock-page-header">
        <div class="stock-title">
            <h1><%= stock.symbol %></h1>
            <p><%= stock.name || 'Loading company name...' %></p>
        </div>
        <div class="stock-actions">
            <button class="watchlist-btn" data-symbol="<%=stock.symbol %>">
                <i class="fas fa-star"></i> <span>Add to Watchlist</span>
            </button>
        </div>
    </div>

    <!-- Stock Price & Info -->
    <div class="stock-overview">
        <div class="price-section">
            <div class="current-price">
                <span class="price" id="current-price">$<%= stock.price.toFixed(2) %></span>
                <span class="change <%= stock.change >= 0 ? 'positive' : 'negative' %>" id="price-change">
                    <%= stock.change >= 0 ? '+' : '' %><%= stock.change.toFixed(2) %> 
                    (<%= stock.changePercent.toFixed(2) %>%)
                </span>
            </div>
            <div class="price-details">
                <div class="price-item">
                    <span class="label">Open:</span>
                    <span class="value">$<%= stock.open.toFixed(2) %></span>
                </div>
                <div class="price-item">
                    <span class="label">High:</span>
                    <span class="value">$<%= stock.high.toFixed(2) %></span>
                </div>
                <div class="price-item">
                    <span class="label">Low:</span>
                    <span class="value">$<%= stock.low.toFixed(2) %></span>
                </div>
                <div class="price-item">
                    <span class="label">Previous Close:</span>
                    <span class="value">$<%= stock.previousClose.toFixed(2) %></span>
                </div>
            </div>
        </div>

        <!-- Stock Chart -->
        <div class="chart-section">
            <div class="chart-header">
                <h3>Price Chart</h3>
                <div class="chart-controls">
                    <button class="chart-btn active" data-period="1D">1D</button>
                    <button class="chart-btn" data-period="1W">1W</button>
                    <button class="chart-btn" data-period="1M">1M</button>
                    <button class="chart-btn" data-period="3M">3M</button>
                    <button class="chart-btn" data-period="1Y">1Y</button>
                </div>
            </div>
            <div class="chart-container" style="position: relative; height: 400px;">
                <canvas id="stockChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Trading Section -->
    <div class="trading-section">
        <h2>Simulate Trade</h2>
        <div class="trading-forms">
            <div class="trade-form-container">
                <h3>Buy <%= stock.symbol %></h3>
                <form id="buyForm" class="trade-form">
                    <input type="hidden" name="symbol" value="<%= stock.symbol %>">
                    <input type="hidden" name="type" value="buy">
                    <input type="hidden" name="price" value="<%= stock.price %>">
                    
                    <div class="form-group">
                        <label for="buyQuantity">Quantity</label>
                        <input type="number" id="buyQuantity" name="quantity" min="1" required>
                    </div>
                    
                    <div class="trade-summary">
                        <div class="summary-item">
                            <span>Price per share:</span>
                            <span>$<%= stock.price.toFixed(2) %></span>
                        </div>
                        <div class="summary-item">
                            <span>Total cost:</span>
                            <span id="buyTotal">$0.00</span>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-buy">
                        <i class="fas fa-arrow-up"></i> Buy Shares
                    </button>
                </form>
            </div>

            <div class="trade-form-container">
                <h3>Sell <%= stock.symbol %></h3>
                <form id="sellForm" class="trade-form">
                    <input type="hidden" name="symbol" value="<%= stock.symbol %>">
                    <input type="hidden" name="type" value="sell">
                    <input type="hidden" name="price" value="<%= stock.price %>">
                    
                    <div class="form-group">
                        <label for="sellQuantity">Quantity</label>
                        <input type="number" id="sellQuantity" name="quantity" min="1" required>
                    </div>
                    
                    <div class="trade-summary">
                        <div class="summary-item">
                            <span>Price per share:</span>
                            <span>$<%= stock.price.toFixed(2) %></span>
                        </div>
                        <div class="summary-item">
                            <span>Total value:</span>
                            <span id="sellTotal">$0.00</span>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-sell">
                        <i class="fas fa-arrow-down"></i> Sell Shares
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Recommendations -->
    <% if (recommendation && recommendation.length > 0) { %>
        <div class="recommendations-section">
            <h2>Analyst Recommendations</h2>
            <div class="recommendation-summary">
                <% 
                const latest = recommendation[0];
                const total = latest.buy + latest.hold + latest.sell + latest.strongBuy + latest.strongSell;
                %>
                <div class="recommendation-chart">
                    <div class="rec-item">
                        <span class="rec-label">Strong Buy</span>
                        <div class="rec-bar">
                            <div class="rec-fill strong-buy" style="width: <%= (latest.strongBuy / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.strongBuy %></span>
                    </div>
                    <div class="rec-item">
                        <span class="rec-label">Buy</span>
                        <div class="rec-bar">
                            <div class="rec-fill buy" style="width: <%= (latest.buy / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.buy %></span>
                    </div>
                    <div class="rec-item">
                        <span class="rec-label">Hold</span>
                        <div class="rec-bar">
                            <div class="rec-fill hold" style="width: <%= (latest.hold / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.hold %></span>
                    </div>
                    <div class="rec-item">
                        <span class="rec-label">Sell</span>
                        <div class="rec-bar">
                            <div class="rec-fill sell" style="width: <%= (latest.sell / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.sell %></span>
                    </div>
                    <div class="rec-item">
                        <span class="rec-label">Strong Sell</span>
                        <div class="rec-bar">
                            <div class="rec-fill strong-sell" style="width: <%= (latest.strongSell / total * 100) %>%"></div>
                        </div>
                        <span class="rec-count"><%= latest.strongSell %></span>
                    </div>
                </div>
            </div>
        </div>
    <% } %>

    <!-- Recent Trades for this Stock -->
    <div class="stock-trades-section">
        <h2>Your Recent Trades - <%= stock.symbol %></h2>
        <div class="trades-list" id="stockTrades">
            <!-- Trades will be loaded here -->
        </div>
    </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
// Global variables
const stockSymbol = '<%= stock.symbol %>';
const currentPrice = <%= stock.price %>;
let stockChart = null;

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeStockPage();
});

// Initialize all components
function initializeStockPage() {
    setupTradeCalculators();
    setupTradeForms();
    setupChartControls();
    initializeChart();
    loadStockTrades();
}

// Setup trade total calculators
function setupTradeCalculators() {
    document.getElementById('buyQuantity').addEventListener('input', function() {
        const quantity = parseInt(this.value) || 0;
        const total = quantity * currentPrice;
        document.getElementById('buyTotal').textContent = `$${total.toFixed(2)}`;
    });

    document.getElementById('sellQuantity').addEventListener('input', function() {
        const quantity = parseInt(this.value) || 0;
        const total = quantity * currentPrice;
        document.getElementById('sellTotal').textContent = `$${total.toFixed(2)}`;
    });
}

// Setup trade form handlers
function setupTradeForms() {
    // Buy form
    document.getElementById('buyForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        const tradeData = {
            type: formData.get('type'),
            quantity: parseInt(formData.get('quantity')),
            price: parseFloat(formData.get('price'))
        };

        executeTrade(tradeData, this);
    });

    // Sell form
    document.getElementById('sellForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        const tradeData = {
            type: formData.get('type'),
            quantity: parseInt(formData.get('quantity')),
            price: parseFloat(formData.get('price'))
        };

        executeTrade(tradeData, this);
    });
}

// Execute trade
async function executeTrade(tradeData, form) {
    try {
        const response = await fetch(`/stocks/${stockSymbol}/trade`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(tradeData)
        });

        const result = await response.json();

        if (result.success) {
            alert('Trade executed successfully!');
            form.reset();
            document.getElementById('buyTotal').textContent = '$0.00';
            document.getElementById('sellTotal').textContent = '$0.00';
            loadStockTrades();
        } else {
            alert('Error executing trade: ' + result.error);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error executing trade');
    }
}

// Setup chart period controls
function setupChartControls() {
    document.querySelectorAll('.chart-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            // Update active state
            document.querySelectorAll('.chart-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            // Load chart for selected period
            loadChartData(this.dataset.period);
        });
    });
}

// Initialize chart
function initializeChart() {
    const ctx = document.getElementById('stockChart');
    if (!ctx) return;

    // Destroy existing chart if it exists
    if (stockChart) {
        stockChart.destroy();
    }

    stockChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: stockSymbol,
                data: [],
                borderColor: '#10b981',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                borderWidth: 2,
                fill: true,
                tension: 0.1,
                pointRadius: 0,
                pointHoverRadius: 5
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    mode: 'index',
                    intersect: false,
                    callbacks: {
                        label: function(context) {
                            return `Price: $${context.parsed.y.toFixed(2)}`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    display: true,
                    grid: {
                        display: false
                    }
                },
                y: {
                    display: true,
                    beginAtZero: false,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toFixed(2);
                        }
                    }
                }
            },
            interaction: {
                intersect: false,
                mode: 'index'
            }
        }
    });

    // Load initial chart data
    loadChartData('1D');
}

// Load chart data for specific period
async function loadChartData(period = '1D') {
    if (!stockChart) return;

    try {
        // Show loading state
        showChartLoading(true);

        // Map period to resolution and time range
        const { resolution, days } = getChartConfig(period);
        const now = Math.floor(Date.now() / 1000);
        const from = now - (days * 24 * 60 * 60);

        const response = await fetch(`/api/candle/${stockSymbol}?resolution=${resolution}&from=${from}&to=${now}`);
        const result = await response.json();

        if (!response.ok) {
            throw new Error(result.message || 'Failed to load chart data');
        }

        if (result.success && result.data && result.data.timestamps && result.data.close) {
            updateChartData(result.data);
        } else {
            throw new Error('No chart data available');
        }

    } catch (error) {
        console.error('Error loading chart data:', error);
        showChartError('Failed to load chart data');
    } finally {
        showChartLoading(false);
    }
}

// Get chart configuration for period
function getChartConfig(period) {
    const configs = {
        '1D': { resolution: '5', days: 1 },
        '1W': { resolution: '15', days: 7 },
        '1M': { resolution: '60', days: 30 },
        '3M': { resolution: 'D', days: 90 },
        '1Y': { resolution: 'W', days: 365 }
    };
    
    return configs[period] || configs['1M'];
}

// Update chart with new data
function updateChartData(data) {
    if (!stockChart || !data.timestamps || !data.close) return;

    try {
        // Process data
        const labels = data.timestamps.map(timestamp => {
            const date = new Date(timestamp * 1000);
            return date.toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric' 
            });
        });

        const prices = data.close;

        // Update chart data
        stockChart.data.labels = labels;
        stockChart.data.datasets[0].data = prices;

        // Update colors based on performance
        if (prices.length > 1) {
            const firstPrice = prices[0];
            const lastPrice = prices[prices.length - 1];
            const isPositive = lastPrice >= firstPrice;

            stockChart.data.datasets[0].borderColor = isPositive ? '#10b981' : '#ef4444';
            stockChart.data.datasets[0].backgroundColor = isPositive ? 
                'rgba(16, 185, 129, 0.1)' : 'rgba(239, 68, 68, 0.1)';
        }

        // Update chart with smooth animation
        stockChart.update('resize');

    } catch (error) {
        console.error('Error updating chart:', error);
        showChartError('Error displaying chart');
    }
}

// Show/hide chart loading state
function showChartLoading(show) {
    const container = document.querySelector('.chart-container');
    if (!container) return;

    const existingLoader = container.querySelector('.chart-loader');
    if (existingLoader) {
        existingLoader.remove();
    }

    if (show) {
        const loader = document.createElement('div');
        loader.className = 'chart-loader';
        loader.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.8);
            z-index: 10;
        `;
        loader.innerHTML = `
            <div style="text-align: center;">
                <div style="
                    width: 30px; 
                    height: 30px; 
                    border: 3px solid #e5e7eb; 
                    border-top: 3px solid #10b981; 
                    border-radius: 50%; 
                    animation: spin 1s linear infinite;
                "></div>
                <div style="margin-top: 10px; color: #6b7280;">Loading chart...</div>
            </div>
        `;

        // Add CSS animation
        if (!document.getElementById('chart-loader-styles')) {
            const style = document.createElement('style');
            style.id = 'chart-loader-styles';
            style.textContent = `
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            `;
            document.head.appendChild(style);
        }

        container.appendChild(loader);
    }
}

// Show chart error
function showChartError(message) {
    const container = document.querySelector('.chart-container');
    if (!container) return;

    // Remove any existing loaders
    const existingLoader = container.querySelector('.chart-loader');
    if (existingLoader) {
        existingLoader.remove();
    }

    // Show error message briefly
    const error = document.createElement('div');
    error.style.cssText = `
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
        padding: 10px 20px;
        border-radius: 4px;
        z-index: 10;
    `;
    error.textContent = message;
    container.appendChild(error);

    // Remove error after 3 seconds
    setTimeout(() => {
        if (error.parentNode) {
            error.remove();
        }
    }, 3000);
}

// Load stock trades
async function loadStockTrades() {
    try {
        const response = await fetch(`/trades/stock/${stockSymbol}`);
        const trades = await response.json();
        
        const tradesContainer = document.getElementById('stockTrades');
        if (!tradesContainer) return;
        
        if (trades.length === 0) {
            tradesContainer.innerHTML = '<div class="no-trades"><p>No trades yet for this stock.</p></div>';
            return;
        }
        
        tradesContainer.innerHTML = trades.map(trade => `
            <div class="trade-item">
                <div class="trade-details">
                    <span class="trade-type ${trade.type.toLowerCase()}">${trade.type.toUpperCase()}</span>
                    <span class="trade-quantity">${trade.quantity} shares</span>
                    <span class="trade-price">$${trade.price.toFixed(2)}</span>
                </div>
                <div class="trade-result">
                    <span class="trade-profit ${trade.profitLoss >= 0 ? 'profit' : 'loss'}">
                        $${(trade.profitLoss ?? 0).toFixed(2)}
                    </span>
                    <span class="trade-date">
                        ${new Date(trade.tradeDate).toLocaleDateString()}
                    </span>
                </div>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error loading trades:', error);
        const tradesContainer = document.getElementById('stockTrades');
        if (tradesContainer) {
            tradesContainer.innerHTML = '<div class="no-trades"><p>Unable to load trades.</p></div>';
        }
    }
}

// Cleanup on page unload
window.addEventListener('beforeunload', function() {
    if (stockChart) {
        stockChart.destroy();
    }
});
</script>

<%- include('partials/footer') %>